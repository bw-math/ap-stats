.. _python_functions:

=========
Functions
=========

This page details **Python** functions we will frequently need to use.

The arguments of functions are specified as between angular brackets ``<>``, with the name of the argument on the left hand side and the type of argument on the right hand side. For example, the definition,

    my_function(<this_argument : required>, <that_argument : optional>)

Says the function ``my_function`` has a *required* argument named ``this_argument`` and an *optional* argument named ``that_argument``. 

.. _python_builtin_functions:

Built-In Functions
==================

``len(<list : required>)``
    The *length* function is used to find how many elements are in a list.

.. code:: python

    data = [ 1, 2, 3, 4, 5 ]
    n = len(data)

``sum(<list : required>)``
    The sum function totals all the elements in a list.

.. code:: python

    data = [ 2, 2, 2, 2 ]
    total = sum(data)
    print(data)

``range(<start : optional>, <stop : required>, <step : optional>)``
    The *range* generates an *iterable* sequence of numbers. 

Note only the ``stop`` argument is required. If only one argument is passed to the *range* function, then it is assumed to represent the ``stop`` argument. 

The *range* function is typically used with :ref:`python_list_comprehension` to generate large lists of data quickly. For example, the following code snippet will create and print the list ``[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]``,

.. code:: python

    data = [ i for i in range(10) ]

Notice the output does not include the endpoint *10*. The *range* function is exclusive with respect to the ``stop`` endpoint. This is so we can use the length function and get a result that makes sense,

.. code:: python

    data = [ i for i in range(10) ]
    n = length(data)
    print(n)

In other words, the *range* function excludes the endpoint so the length of the returned list will equal whatever number was originally passed into the *range* function.

You can use the ``start`` and ``step`` arguments to generate arbitrary lists of data according to a rule. The following code snippet will create and print the list ``[2, 4, 6, 8, 10, 12, 14, 16, 18]``

.. code:: python 

    data = [ i for i range(2, 20, 2) ]

.. _python_standard_library:

Standard Library Functions
==========================

In addition to the functions accessible by default in **Python**, there are also a large number of functions you can ``import`` to extend the basic functionality of **Python**. These functions reside in the *Standard Library*. 

The syntax for importing an additional package is simply,

    import <package-name>

We will be using two packages in particular from the *Standard Library* over and over again in this class, ``math`` and ``ranodom``. 

.. _python_math_package:

Math
----

The ``math`` has all sorts of goodies in it. Unfortunately, we won't need most of them. The ones we will need a detailed below. 


Square Root
***********

TODO

Natural Base e
**************

TODO 

.. _python_random_package:

Random
------

The ``random`` package is very appropriately named. It is used to generate random data of all types. Let's take a look.

.. note:: 

    The numbers returned by ``random`` are not *actually* random. They are generated with a complex cryptographic algorithm whose details are well beyond the scope of this course. Suffice to say, *how* random numbers are generated by computer programs is an active area of research with lots of investment dollars being poured into it.  
    
    Truly random numbers are a valuable commodity; they are used by investment banks to simulate financial outcomes, they are used by companies to train machine learning algorithms, they are used by militaries to conduct war-games, etc. 

    The numbers that are returned by ``random`` are what are called `pseudo-random numbers <https://en.wikipedia.org/wiki/Pseudorandom_number_generator>`_. *Pseudo-random numbers* approximate the properties we would expect random numbers to have, but if you look too closely you might start to notice they are not *truly* random. So don't look too closely; For the purposes of this class, we may assume anything returned by the ``random`` package is actually random.

.. _python_random_function:

Random Function
***************

The simplest function in the ``random`` package is the ``random()``. The ``random()`` has no arguments; it will always return a number between *0* and *1*, excluding the endpoitns. The following code illustrates its use,

.. code:: python

    import random
    
    x = random.random()
    
    print("this is a random number between 0 and 1: ", x)

.. warning:: 
    
    Be careful to distinguish the ``random`` *package* from the ``random()`` *function*. The ``random`` *package* is a `namespace <https://realpython.com/python-namespaces-scope/>` for *naming* functions. The ``random()`` function is an operation that produce output.

.. _python_randint_function:

Random Integer Function
***********************

The :ref:`python_random_function` will suffice for most purposes. Occassionally, we will need integer-valued random numbers instead of real-valued random numbers. To that end, we will need to use the ``randint()`` function. The syntax for the ``randint()`` is given below,

    randint(<start>, <stop>)

``randint`` returns a random integer between ``<start>`` and ``<stop>``, including both endpoints.

The following code illustrates its use, 

.. code:: python 

    import random 

    x = random.randint(1,5)
    print("this is a random integer between 1 and 5, including 1 and 5: ", x)

.. _python_choice_function:

Random Choice Function
**********************

Finally, the last function we will need from the ``random`` package is the ``choice()`` method. The previous two functions we looked were for generating :ref:`quantitative_data`. The ``choice()`` function, on the other hand, will generate :ref:`categorical_data`. The syntax for ``choice`` is given below,

    choice(<list of options>)

The following code illustrates its use,

.. code:: python

    import random 

    options = [ "Augustus", "Tiberius", "Hadrian" ]
    x = random.choice(options)

    print("this is a random choice from the list ", options, " : ", x)

.. _python_creating_functions:

Creating Functions
==================

Occassionally, the *Standard Library* plus third-party packages will not be enough to do what we need to do. In those cases, we have no other options but to define our own function.

Function Signatures
-------------------

A function in **Python** has four components its ``def``, its *name*, its *arguments* and its ``return`` value. The following list breaks each of these components down,

1. ``def`` is a *keyword* that informs **Python** you are about to define a function. You must *always* precede a function with ``def``. 

2. The function *name* is how you will access the function. You have already encountered several function *names* with ``range()`` and ``sum()``. 

3. The *arguments* are the input that is passed into the function. *Arguments* are variables.

4. The ``return`` value is data the function outputs.
   
Function Example
----------------

Putting all four of these pieces together, let's create a simple function.

.. code:: python

    def fancy(word):
        sentence = word + " is fancy!" 
        return sentence

Take note of the *indentation*. **Python** is very particular about *indentation* because that is how it groups functions together. A *function* definition must be indented once (with ``TAB``). All lines within the function must be the same *indentation* level. If you do not follow this requirement, you will get errors. Errors are bad. So, always pay your indentation.

We can call this function after defined it by addressing it by its name and passing in an argument. Create a new :ref:`IDLE Notebook <python_idle>`, copy in the following function and try executing it with ``F5``,

.. code:: python

    def fancy(word):
        sentence = word + " is fancy!" 
        return sentence

    fancified_taco = fancy("taco")

    print(fancified_taco)